/*
* Arduino Authorization Level Management
*                
* by Ahmad Mahrous
* 
* Library: MFRC522, https://github.com/miguelbalboa/rfid
*/

#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

#define RST_PIN   9
#define SS_PIN    10

byte readCard[4];
char* myTags[100] = {};
char* authCodes[100] = {}; // Array to store authorization codes
int tagsCount = 0;
String tagID = "";
boolean successRead = false;
boolean programmingMode = false;
String masterTag = ""; // Master card tag ID

// Create instances
MFRC522 mfrc522(SS_PIN, RST_PIN);
LiquidCrystal lcd(2, 3, 4, 5, 6, 7); // Parameters: (rs, enable, d4, d5, d6, d7)

void setup() {
  // Initiating
  SPI.begin();        // SPI bus
  mfrc522.PCD_Init(); //  MFRC522
  lcd.begin(16, 2);   // LCD screen

  // Prints the initial message
  lcd.print("-No Admin Card-");
  lcd.setCursor(0, 1);
  lcd.print("    SCAN NOW");
  // Waits until a master card is scanned
  while (!successRead) {
    successRead = getID();
    if (successRead == true) {
      masterTag = tagID; // Sets the master tag
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Admin Tag Set!");
    }
  }
  successRead = false;
  printNormalModeMessage();
}

void loop() {
  // If a new card is present...
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  tagID = "";
  // The MIFARE PICCs that we use have 4 byte UID
  for (uint8_t i = 0; i < 4; i++) {
    readCard[i] = mfrc522.uid.uidByte[i];
    tagID.concat(String(mfrc522.uid.uidByte[i], HEX)); // Adds the 4 bytes in a single String variable
  }
  tagID.toUpperCase();
  mfrc522.PICC_HaltA(); // Stop reading

  if (tagID == masterTag) {
    programmingMode = !programmingMode;
    lcd.clear();
    if (programmingMode) {
      lcd.print("Prog Mode Active");
    } else {
      lcd.print("Prog Mode Exit");
    }
    printNormalModeMessage();
    return;
  }

  if (programmingMode) {
    for (int i = 0; i < 100; i++) {
      if (tagID == myTags[i]) {
        // Reset to auth level 1 if a level is already set
        updateAuthCode(i, 1);
        lcd.clear();
        lcd.print("Auth Level 1 Set");
        printNormalModeMessage();
        return;
      }
    }
    for (int i = 0; i < 100; i++) {
      if (myTags[i] == NULL || strlen(myTags[i]) == 0) {
        myTags[i] = strdup(tagID.c_str());
        updateAuthCode(i, 1);
        lcd.clear();
        lcd.print("Auth Level 1 Set");
        printNormalModeMessage();
        tagsCount++;
        return;
      }
    }
  } else {
    for (int i = 0; i < 100; i++) {
      if (tagID == myTags[i]) {
        int authLevel = getAuthLevel(authCodes[i]);
        lcd.clear();
        lcd.print("Auth Level: ");
        lcd.setCursor(0, 1);
        lcd.print(authLevel);
        printNormalModeMessage();
        return;
      }
    }
    lcd.clear();
    lcd.print("Card not config");
    lcd.setCursor(0, 1);
    lcd.print("Contact IT");
    printNormalModeMessage();
  }
}

uint8_t getID() {
  // Getting ready for Reading PICCs
  if (!mfrc522.PICC_IsNewCardPresent()) { // If a new PICC placed to RFID reader continue
    return 0;
  }
  if (!mfrc522.PICC_ReadCardSerial()) { // Since a PICC placed get Serial and continue
    return 0;
  }
  tagID = "";
  for (uint8_t i = 0; i < 4; i++) { // The MIFARE PICCs that we use have 4 byte UID
    readCard[i] = mfrc522.uid.uidByte[i];
    tagID.concat(String(mfrc522.uid.uidByte[i], HEX)); // Adds the 4 bytes in a single String variable
  }
  tagID.toUpperCase();
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}

int getAuthLevel(char* authCode) {
  String authStr = String(authCode);
  if (authStr.startsWith("AUTH-LEVEL_")) {
    return authStr.substring(11).toInt();
  }
  return 0;
}

void updateAuthCode(int index, int authLevel) {
  String newAuthCode = "AUTH-LEVEL_" + String(authLevel);
  authCodes[index] = strdup(newAuthCode.c_str());
}

void printNormalModeMessage() {
  delay(1500);
  lcd.clear();
  lcd.print("-Authentication-");
  lcd.setCursor(0, 1);
  lcd.print(" Scan Your Card.");
}
